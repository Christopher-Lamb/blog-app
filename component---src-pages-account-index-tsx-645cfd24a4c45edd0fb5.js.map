{"version":3,"file":"component---src-pages-account-index-tsx-645cfd24a4c45edd0fb5.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/utils/searchFunctions.ts","webpack://my-gatsby-site/./src/pages/account/index.tsx","webpack://my-gatsby-site/./src/utils/blogAPI.ts"],"sourcesContent":["interface BlogPreview {\n  title: string;\n  thumbnail?: string;\n  description?: string;\n}\n\ninterface BlogBoxProps {\n  author: string;\n  slug: string;\n  blogPreview: BlogPreview;\n  isPublished?: boolean;\n  firstPublishedDate?: string | number | Date;\n  lastUpdatedDate?: string | number | Date;\n  createdAt?: string | number | Date;\n  updatedAt?: string | number | Date;\n}\n\nexport function localSearchBlogs(blogs: BlogBoxProps[], searchTerm: string): BlogBoxProps[] {\n  const matchingBlogs: BlogBoxProps[] = [];\n  const nonMatchingBlogs: BlogBoxProps[] = [];\n\n  // Divide blogs into matching and non-matching arrays\n  blogs.forEach((blog) => {\n    if (blog.blogPreview.title.toLowerCase().includes(searchTerm.toLowerCase())) {\n      matchingBlogs.push(blog);\n    } else {\n      nonMatchingBlogs.push(blog);\n    }\n  });\n\n  // Sort only the matching blogs\n  matchingBlogs.sort((a, b) => {\n    const titleA = a.blogPreview.title.toLowerCase();\n    const titleB = b.blogPreview.title.toLowerCase();\n    if (titleA.startsWith(searchTerm.toLowerCase()) && !titleB.startsWith(searchTerm.toLowerCase())) {\n      return -1;\n    } else if (!titleA.startsWith(searchTerm.toLowerCase()) && titleB.startsWith(searchTerm.toLowerCase())) {\n      return 1;\n    }\n    return titleA.indexOf(searchTerm.toLowerCase()) - titleB.indexOf(searchTerm.toLowerCase());\n  });\n\n  // Return the concatenated result of matching and non-matching blogs\n  return matchingBlogs.concat(nonMatchingBlogs);\n}\n\n// // Example usage:\n// const blogs: BlogBoxProps[] = [\n//   { author: \"Jane Doe\", slug: \"blog-1\", blogPreview: { title: \"How to code in TypeScript\" } },\n//   { author: \"John Smith\", slug: \"blog-2\", blogPreview: { title: \"TypeScript in 10 minutes\" } },\n//   { author: \"Alice Johnson\", slug: \"blog-3\", blogPreview: { title: \"Introduction to TypeScript\" } },\n// ];\n\n// const searchTerm = \"typescript\";\n// const sortedBlogs = searchBlogs(blogs, searchTerm);\n// console.log(sortedBlogs);\n","import React, { useEffect, useState } from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { Authenticated, Container, SearchBar, Navbar, AccountHeader, BlogBox, BlogSwitch, Footer, EditingWrapper, PublishedWrapper, SortBox } from \"../../components\";\nimport { createBlog, initAuthorsBlogs, deleteAllUserBlogs, publishBlog, getPublishedBlogsByAuthor, deleteBlog, unpublishBlog } from \"../../utils/blogAPI\";\nimport { useUserContext } from \"../../context/UserContext\";\nimport { localSearchBlogs } from \"../../utils/searchFunctions\";\n\ninterface BlogPreview {\n  title: string;\n  thumbnail?: string;\n  description?: string;\n}\n\ninterface BlogBoxProps {\n  author: string;\n  slug: string;\n  blogPreview: BlogPreview;\n  isPublished?: boolean;\n  firstPublishedDate?: string | number | Date;\n  lastUpdatedDate?: string | number | Date;\n  createdAt?: string | number | Date;\n  updatedAt?: string | number | Date;\n}\nfunction sortArrayByDate(arr: BlogBoxProps[], attribute: \"createdAt\" | \"updatedAt\" | \"firstPublishedDate\" | \"lastUpdatedDate\"): BlogBoxProps[] {\n  // console.log({ attribute });\n  return arr.sort((a, b) => {\n    // Handle potential undefined dates by providing a default that sorts them last\n    const dateA = new Date(a[attribute] || 0); // Converts undefined to Unix Epoch (very old date)\n    const dateB = new Date(b[attribute] || 0); // Same as above\n\n    return dateB.getTime() - dateA.getTime(); // Compare timestamps\n  });\n}\nconst AccountContents: React.FC<PageProps> = () => {\n  const [isEditing, setIsEditing] = useState(true);\n  const [draftBlogs, setDraftBlogs] = useState<BlogBoxProps[]>([]);\n  const [publishedBlogs, setPublishedBlogs] = useState<BlogBoxProps[]>([]);\n  const [draftSortType, setDraftSortType] = useState(\"lastUpdated\");\n  const [publishedSortType, setPublishedSortType] = useState(\"lastPublished\");\n  const { userObj } = useUserContext();\n\n  const handleCreateBlog = async () => {\n    const data: BlogBoxProps = await createBlog();\n\n    setDraftBlogs((prevState: any) => [{ author: userObj?.username, slug: data.slug, blogPreview: data.blogPreview }, ...prevState]);\n  };\n  const handleDeleteAll = async () => {\n    // await deleteAllUserBlogs();\n    setDraftBlogs([]);\n  };\n\n  useEffect(() => {\n    const initBlogs = async () => {\n      try {\n        // Handle Draft Blogs\n        const blogs: BlogBoxProps[] = await initAuthorsBlogs();\n        let draft = sortArrayByDate(blogs, \"updatedAt\");\n        setDraftBlogs(draft);\n\n        const pubBlogs: BlogBoxProps[] = await getPublishedBlogsByAuthor();\n        let published = sortArrayByDate(pubBlogs, \"lastUpdatedDate\");\n        setPublishedBlogs(published);\n\n        // console.log({ blogs, pubBlogs });\n      } catch (err) {}\n    };\n    initBlogs();\n  }, []);\n\n  const handleBlogSwitch = async (bool: boolean) => {\n    setIsEditing(bool);\n    if (!bool) {\n    }\n  };\n\n  const handlePublishBlog = async (slug: string) => {\n    try {\n      //This is dumb we are watting for it to respond getting a response and not using it XD\n      const res = await publishBlog(slug);\n      // console.log({ res });\n      // console.log({ slug, draftBlogs, publishedBlogs });\n      const isAlreadyPublished = publishedBlogs.some((blog: BlogBoxProps) => blog.slug === slug);\n\n      if (!isAlreadyPublished) {\n        const newlyPublishedBlog: any = draftBlogs.find((blog: BlogBoxProps) => blog.slug === slug);\n        if (newlyPublishedBlog) {\n          newlyPublishedBlog[\"isPublished\"] = true;\n          //If this is the first time publishing this blog\n          if (!newlyPublishedBlog[\"firstPublishedDate\"]) {\n            //We add the firstPublishDate\n            newlyPublishedBlog[\"firstPublishedDate\"] = new Date();\n            newlyPublishedBlog[\"lastUpdatedDate\"] = new Date();\n          } else {\n            // Else we pass the blog strictly as an update\n            newlyPublishedBlog[\"lastUpdatedDate\"] = new Date();\n          }\n          //Insert blog into state\n          const newDraftBlogs = draftBlogs.map((blog: BlogBoxProps) => {\n            if (blog.slug === slug) {\n              return newlyPublishedBlog;\n            } else {\n              return blog;\n            }\n          });\n\n          setDraftBlogs(newDraftBlogs);\n          setPublishedBlogs((prev: any) => [newlyPublishedBlog, ...prev]);\n        } else {\n          const newPublishedBlogs = publishedBlogs.map((pubBlog) => {\n            if (pubBlog.slug === slug) {\n              return { ...pubBlog, lastUpdatedDate: new Date() };\n            } else {\n              return pubBlog;\n            }\n          });\n          setPublishedBlogs(() => [...newPublishedBlogs]);\n        }\n      }\n    } catch (err) {}\n  };\n\n  const handleUnpublish = async (slug: string) => {\n    const newPublishedBlogs = publishedBlogs.filter((blog) => blog.slug !== slug);\n    const newDraftBlogs = draftBlogs.map((blog) => {\n      if (blog.slug === slug) {\n        return { ...blog, isPublished: false };\n      } else {\n        return blog;\n      }\n    });\n    setPublishedBlogs(newPublishedBlogs);\n    setDraftBlogs(newDraftBlogs);\n    await unpublishBlog(slug);\n  };\n\n  const handleDeleteBlog = async (slug: string) => {\n    const newDraftBlogs = draftBlogs.filter((blog) => blog.slug !== slug);\n    const newPublishedBlogs = publishedBlogs.filter((blog) => blog.slug !== slug);\n    setDraftBlogs(newDraftBlogs);\n    setPublishedBlogs(newPublishedBlogs);\n    const res = await deleteBlog(slug);\n  };\n\n  const handleDraftSort = (sortType: string) => {\n    let arr: any = [];\n    setDraftSortType(sortType);\n    if (sortType === \"lastUpdated\") {\n      arr = sortArrayByDate(draftBlogs, \"updatedAt\");\n    } else {\n      arr = sortArrayByDate(draftBlogs, \"createdAt\");\n    }\n    setDraftBlogs(() => [...arr]);\n  };\n\n  const handlePublishSort = (sortType: string) => {\n    let arr: any = [];\n    // console.log({ sortType });\n    setPublishedSortType(sortType);\n    if (sortType === \"latestPublish\") {\n      arr = sortArrayByDate(publishedBlogs, \"lastUpdatedDate\");\n    } else if (sortType === \"newest\") {\n      arr = sortArrayByDate(publishedBlogs, \"firstPublishedDate\");\n    }\n    // console.log(arr);\n    // console.log(arr.map((item: any) => item.blogPreview.title).join(\"\\n\"));\n    setPublishedBlogs(() => [...arr]);\n  };\n\n  const handleDraftSearch = (searchQuery: string) => {\n    //If we are not sorting by search resort by sortbox\n    if (searchQuery === \"\") {\n      handleDraftSort(draftSortType);\n    } else {\n      const newDrafts = localSearchBlogs(draftBlogs, searchQuery);\n      setDraftBlogs(() => [...newDrafts]);\n    }\n  };\n\n  const handlePublishSearch = (searchQuery: string) => {\n    //If we are not sorting by search resort by sortbox\n    if (searchQuery === \"\") {\n      handlePublishSort(publishedSortType);\n    } else {\n      const newPublished = localSearchBlogs(publishedBlogs, searchQuery);\n      setPublishedBlogs(() => [...newPublished]);\n    }\n  };\n  return (\n    <main>\n      <Navbar />\n      <AccountHeader />\n      <BlogSwitch onChange={handleBlogSwitch} />\n      {isEditing ? (\n        <>\n          <div className=\"mx-auto max-w-five px-4 xl:px-0 flex flex-col md:flex-row gap-2xsmall\">\n            <CreateBlogBtn onClick={handleCreateBlog}>Create Blog</CreateBlogBtn>\n            <SortBox onChange={handleDraftSort} initialSortType={draftSortType}>\n              <option value=\"lastUpdated\">Last Updated</option>\n              <option value=\"lastCreated\">Last Created</option>\n            </SortBox>\n            <div className=\"max-w-three w-full mt-3\">\n              <SearchBar type=\"medium\" onChange={handleDraftSearch} />\n            </div>\n            {/* <CreateBlogBtn onClick={handleDeleteAll}>Delete All Blogs</CreateBlogBtn> */}\n          </div>\n          <Container className=\"gap-xsmall mt-med container mx-auto px-4 md:px-0 xl:max-w-five\">\n            {draftBlogs.map((props: any, i: number) => (\n              <EditingWrapper\n                key={props.slug}\n                isPublished={props.isPublished}\n                onPublish={() => handlePublishBlog(props.slug)}\n                onDelete={() => {\n                  // console.log(\"HELLOOOOOOOOOOO\");\n                  handleDeleteBlog(props.slug);\n                }}\n              >\n                <BlogBox {...props} />\n              </EditingWrapper>\n            ))}\n          </Container>\n        </>\n      ) : (\n        <div className=\"mx-auto max-w-five px-4 grid xl:px-0 flex gap-2xsmall\">\n          <div className=\"flex gap-2xsmall\">\n            <SortBox onChange={handlePublishSort} initialSortType={publishedSortType}>\n              <option value=\"latestPublish\">Latest Publish</option>\n              <option value=\"newest\">Newest</option>\n            </SortBox>\n            <div className=\"max-w-three w-full mt-3\">\n              <SearchBar type=\"medium\" onChange={handlePublishSearch} />\n            </div>\n          </div>\n          <Container className=\"gap-xsmall mt-med container mx-auto px-4 md:px-0 xl:max-w-five\">\n            {publishedBlogs.map((props: any) => (\n              <PublishedWrapper key={props.slug} onUnpublish={() => handleUnpublish(props.slug)}>\n                <BlogBox {...props} />\n              </PublishedWrapper>\n            ))}\n          </Container>\n        </div>\n      )}\n      <Footer className=\"mt-four\" />\n    </main>\n  );\n};\n\nconst CreateBlogBtn: React.FC<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => {\n  const { children, ...otherProps } = props;\n  return (\n    <button className=\"text-med px-xsmall py-2xsmall primary\" {...otherProps}>\n      {children}\n    </button>\n  );\n};\n\nconst AccountPage = (props: PageProps) => {\n  return <Authenticated WrappedComponent={AccountContents} {...props} />;\n};\n\nexport default AccountPage;\n\nexport const Head: HeadFC = () => <title>Home</title>;\n","import axios, { AxiosResponse } from \"axios\";\n\nconst baseURL = process.env.NODE_ENV === \"development\" ? \"http://localhost:8001/api\" : \"https://krispywebsites/api\";\n\ninterface Blog {\n  title: string;\n  slug: string;\n  draft?: [];\n}\n\ninterface BlogItem {\n  type: string;\n  content: string;\n  src?: string | ArrayBuffer;\n}\n\nexport const createBlog = async <T>(): Promise<T> => {\n  try {\n    // Pass the user data as the second argument to axios.post\n\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/`, {}, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Error during Blog Creation\");\n  }\n};\n\nexport const initAuthorsBlogs = async <T>(): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/byAuthor`, {}, { withCredentials: true });\n    return response.data;\n  } catch (err) {\n    throw new Error(\"Couldnt Get Authors Blogs\");\n  }\n};\n\nexport const getDraftBySlug = async <T>(slug: string): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/draftBySlug`, { slug }, { withCredentials: true });\n    // console.log({ response });\n    return response.data;\n  } catch (err) {\n    throw new Error(\"Couldnt Get Authors Blogs\");\n  }\n};\n\nexport const deleteAllUserBlogs = async <T>(): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.delete(`${baseURL}/blog/deleteAll`, { withCredentials: true });\n    return response.data;\n  } catch (err) {\n    throw new Error(\"Couldnt Delete All Blogs :/\");\n  }\n};\n\nexport const updateDraftBySlug = async <T>(slug: string, draft: BlogItem[]): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.patch(`${baseURL}/blog/draftBySlug`, { slug, draft }, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Oopsie Blog Didnt update something went wrong >:(\");\n  }\n};\n\nexport const updateSlugBySlug = async <T>(oldSlug: string, newSlug: string): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.patch(`${baseURL}/blog/slugBySlug`, { oldSlug, newSlug }, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Oopsie Slug Didnt update something went wrong >:(\");\n  }\n};\n\nexport const publishBlog = async <T>(slug: string): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/publish-blog`, { slug }, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    // console.log({ error });\n    throw new Error(\"Couldnt get blog post...XD\");\n  }\n};\n\nexport const getPublishedBlogsByAuthor = async <T>(): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/published-by-author`, {}, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    // console.log({ error });\n    throw new Error(\"Couldnt get blog post...XD\");\n  }\n};\n\nexport const deleteBlog = async <T>(slug: string): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/deleteBySlug`, { slug }, { withCredentials: true });\n    // console.log({ response });\n    return response.data;\n  } catch (error) {\n    // console.log({ error });\n    throw new Error(\"Couldnt delete blog..XD\");\n  }\n};\nexport const unpublishBlog = async <T>(slug: string): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/unpublish-blog`, { slug }, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    // console.log({ error });\n    throw new Error(\"Couldnt get blog post...XD\");\n  }\n};\n\nexport const getPublishedBlogs = async <T>(pageNumber: number, limit: number): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/get-published-blogs`, { pageNumber, limit }, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    // console.log({ error });\n    throw new Error(\"Couldnt get published blogs...XD\");\n  }\n};\nexport const getPageAmount = async <T>(limit: number): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/get-page-amount`, { limit }, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    // console.log({ error });\n    throw new Error(\"Couldnt get published blogs...XD\");\n  }\n};\n\nexport const searchPublishedBlogs = async <T>(pageNumber: number, searchQuery: string, limit: number): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/search-published-blogs`, { page: pageNumber, limit, searchQuery }, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    // console.log({ error });\n    throw new Error(\"Couldnt Search published Blogs...XD\");\n  }\n};\n\nexport const getPublishedBySlug = async <T>(slug: string): Promise<T> => {\n  try {\n    const response: AxiosResponse<T> = await axios.post(`${baseURL}/blog/get-published-by-slug`, { slug: slug }, { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    // console.log({ error });\n    throw new Error(\"Couldnt Search published Blogs...XD\");\n  }\n};\n"],"names":["localSearchBlogs","blogs","searchTerm","matchingBlogs","nonMatchingBlogs","forEach","blog","blogPreview","title","toLowerCase","includes","push","sort","a","b","titleA","titleB","startsWith","indexOf","concat","sortArrayByDate","arr","attribute","dateA","Date","getTime","AccountContents","isEditing","setIsEditing","useState","draftBlogs","setDraftBlogs","publishedBlogs","setPublishedBlogs","draftSortType","setDraftSortType","publishedSortType","setPublishedSortType","userObj","useUserContext","useEffect","async","draft","initAuthorsBlogs","published","getPublishedBlogsByAuthor","err","initBlogs","handleDraftSort","sortType","_toConsumableArray","handlePublishSort","React","Navbar","AccountHeader","BlogSwitch","onChange","bool","className","CreateBlogBtn","onClick","data","createBlog","prevState","author","username","slug","SortBox","initialSortType","value","SearchBar","type","searchQuery","newDrafts","Container","map","props","i","EditingWrapper","key","isPublished","onPublish","publishBlog","some","newlyPublishedBlog","find","newDraftBlogs","prev","newPublishedBlogs","pubBlog","lastUpdatedDate","handlePublishBlog","onDelete","filter","deleteBlog","handleDeleteBlog","BlogBox","newPublished","PublishedWrapper","onUnpublish","unpublishBlog","handleUnpublish","Footer","children","otherProps","Object","assign","Authenticated","WrappedComponent","Head","baseURL","axios","post","withCredentials","error","console","Error","getDraftBySlug","updateDraftBySlug","patch","updateSlugBySlug","oldSlug","newSlug","getPublishedBlogs","pageNumber","limit","getPageAmount","searchPublishedBlogs","page","getPublishedBySlug"],"sourceRoot":""}