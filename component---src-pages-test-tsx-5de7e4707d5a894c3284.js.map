{"version":3,"file":"component---src-pages-test-tsx-5de7e4707d5a894c3284.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/components/FormTEST.tsx","webpack://my-gatsby-site/./src/pages/test.tsx"],"sourcesContent":["import React from \"react\";\nfunction toKebabCase(input: string): string {\n  //Removes anything after a comma\n  const commaFunc = (string: string) => (string.includes(\",\") ? string.substring(0, string.indexOf(\",\")) : string);\n  return commaFunc(\n    input\n      // Convert the string to lowercase\n      .toLowerCase()\n      //remove any name names\n      .replaceAll(\"name\", \"\")\n      //replace any \"(text)\"\n      .replaceAll(/\\(.*?\\)/g, \"\")\n      //replace trailing spaces\n      .replace(/\\s+$/, \"\")\n      // Replace spaces with hyphens\n      .replace(/\\s+/g, \"-\")\n  );\n}\n\nconst inputStyle = \"p-2 text-black border font-normal\";\nconst labelStyle = \"jost text-lg\";\n\nconst Form: React.FC<{ children: React.ReactNode; className?: string; id?: string; preSubmit?: () => void }> = ({ children, className, id, preSubmit }) => {\n  const getPageName = () => {\n    if (typeof window !== \"undefined\") {\n      let pathname = window.location.pathname;\n      if (pathname === \"/\") return \"Home\";\n      pathname = pathname.replaceAll(\"/\", \"\");\n      pathname = pathname\n        .split(\"-\")\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n      return pathname;\n    }\n  };\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    preSubmit && preSubmit();\n    e.currentTarget.submit();\n  };\n\n  return (\n    <form id={id} className={className} action={\"https://krispywebsites.com/form\"} method=\"POST\" onSubmit={handleSubmit}>\n      <input type=\"hidden\" name=\"recipient\" value=\"christopher.j.lamb13@gmail.com\" />\n      {typeof window !== \"undefined\" && (\n        <>\n          <input type=\"hidden\" name=\"redirect_url\" defaultValue={window.location.href} />\n          {/* <input type=\"hidden\" name=\"page\" defaultValue={getPageName() + \" Page\"} /> */}\n          <input\n            type=\"hidden\"\n            name=\"warning\"\n            value={\n              \"Please do not reply directly to this email. If you need to respond, please create a new email and use the customer's email address provided in the form. Any reply sent directly to this email will go to our email service, not the customer\"\n            }\n          ></input>\n        </>\n      )}\n      {children}\n    </form>\n  );\n};\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  inputClassName?: string;\n}\n\nconst Input: React.FC<InputProps> = ({ label, ...other }) => {\n  const { className, inputClassName, ...inputProps } = other;\n  const name = toKebabCase(label);\n\n  return (\n    <div className={\"w-full \" + className}>\n      <label htmlFor={name} className={labelStyle}>\n        {label} {inputProps.required && <span className=\"text-red-600\">*</span>}\n      </label>\n      <input id={name} name={name} className={`w-full shadow ${inputClassName} ` + inputStyle} {...inputProps} />\n    </div>\n  );\n};\n\ninterface TextAreaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  label: string;\n}\n\nconst TextArea: React.FC<TextAreaProps> = ({ label, ...other }) => {\n  const { className, ...textAreaProps } = other;\n  const name = toKebabCase(label);\n  return (\n    <div className={\"w-full h-auto \" + className}>\n      {label && (\n        <label htmlFor={name} className={labelStyle}>\n          {label}\n          {textAreaProps.required && <span className=\"text-red-600\"> *</span>}\n        </label>\n      )}\n      <textarea id={name} name={name} {...textAreaProps} className={\"w-full shadow min-h-[8rem] \" + inputStyle} />\n    </div>\n  );\n};\n\ninterface SelectProps {\n  label: string;\n  options: string[];\n  selected?: string;\n  className?: string;\n  requiredText?: string;\n  onChange?: (val: string) => void;\n}\nconst Select: React.FC<SelectProps> = ({ label, options, selected, className, requiredText, onChange }) => {\n  const name = toKebabCase(label);\n  const kebabMap: Record<string, string> = options.reduce((acc: Record<string, string>, option: string) => {\n    acc[toKebabCase(option)] = option;\n    return acc;\n  }, {});\n\n  return (\n    <div className={`grid ${className}`}>\n      <label htmlFor={name} className={labelStyle}>\n        {label} {requiredText && <span className=\"text-red-600\">*</span>}\n      </label>\n      <select required={!!requiredText} onChange={(e) => onChange && onChange(kebabMap[e.target.value])} id={name} name={name} className={\"w-full shadow \" + inputStyle}>\n        {requiredText && <option value=\"\">{requiredText}</option>}\n        {options.map((value, i) => {\n          if (value === selected)\n            return (\n              <option key={i} value={toKebabCase(value)} selected>\n                {value}\n              </option>\n            );\n          return (\n            <option key={i} value={toKebabCase(value)}>\n              {value}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n};\nconst FieldSet: React.FC<{ children: React.ReactNode; className?: string }> = ({ children, className }) => {\n  return <fieldset className={className}>{children}</fieldset>;\n};\n\ninterface RadioGroupProps {\n  label: string;\n  options: string[];\n  className?: string;\n  onChange?: (val: string) => void;\n  required?: boolean;\n  defaulted?: boolean;\n}\n\nexport const RadioGroup: React.FC<RadioGroupProps> = ({ label, options, className, onChange, required, defaulted }) => {\n  return (\n    <fieldset className={className}>\n      <legend className={\"block col-span-full \" + labelStyle}>\n        {label} {required && <span className=\"text-red-600\">*</span>}\n      </legend>\n      {options.map((value, i) => (\n        <label key={i} className=\"w-full flex gap-3xsmall\">\n          <input\n            name={toKebabCase(label)}\n            defaultChecked={i === 0 && defaulted}\n            required={required}\n            onChange={() => onChange && onChange(value)}\n            className=\"cursor-pointer\"\n            value={value}\n            type=\"radio\"\n          />\n          <span className=\"block text-nowrap\">{value}</span>\n        </label>\n      ))}\n    </fieldset>\n  );\n};\n\ninterface CheckboxProps extends RadioGroupProps {\n  selected?: number[];\n}\n\nexport const CheckboxGroup: React.FC<CheckboxProps> = ({ label, options, className, selected = [] }) => {\n  return (\n    <fieldset className={className}>\n      <legend className={\"col-span-full \" + labelStyle}>{label}</legend>\n      {options.map((value, i) => (\n        <Checkbox key={i} checked={selected?.includes(i)} label={value} name={toKebabCase(label)} />\n      ))}\n    </fieldset>\n  );\n};\n\nexport const Checkbox: React.FC<{ label: string; name: string; checked: boolean }> = ({ label, name, checked }) => {\n  return (\n    <label className=\"w-full flex gap-3xsmall\">\n      <input readOnly name={toKebabCase(name)} className=\"cursor-pointer\" value={label} checked={checked} type=\"checkbox\" />\n      <span className=\"block text-nowrap\">{label}</span>\n    </label>\n  );\n};\n\nexport { Form, Input, TextArea, FieldSet, Select };\n","import React from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { Navbar } from \"../components\";\nimport { Form, Input, RadioGroup, CheckboxGroup, Select, TextArea } from \"../components/FormTEST\";\n\nconst stringifyDate = () =>\n  new Date().toLocaleDateString(\"en-US\", {\n    timeStyle: \"short\",\n    weekday: \"short\", // abbreviated day of the week\n    year: \"numeric\", // numeric year\n    month: \"short\", // abbreviated month name\n    day: \"numeric\", // numeric day of the month\n  });\n\nconst Test: React.FC<PageProps> = () => {\n  const [currentTest, setCurrentTest] = React.useState(0);\n  const [pageName, setPageName] = React.useState(\"\");\n\n  const handlePreSubmit = () => {\n    localStorage.setItem(\"email-enum-num\", `${currentTest}`);\n  };\n\n  React.useEffect(() => {\n    let getStoredNum = localStorage.getItem(\"email-enum-num\") || \"0\";\n    const intStoredNum = parseInt(getStoredNum) + 1;\n    setCurrentTest(intStoredNum);\n\n    const date = new Date().toLocaleDateString(\"en-US\", {\n      year: \"numeric\", // numeric year\n      month: \"short\", // abbreviated month name\n      day: \"numeric\", // numeric day of the month\n    });\n    setPageName(`Test: ${intStoredNum} | ${date}`);\n  }, []);\n\n  return (\n    <main>\n      <div className=\"h-large bg-indigo-700 flex justify-center items-center\">\n        <h1 className=\"text-one font-bold text-white\">TEST PAGE</h1>\n      </div>\n      <div className=\"max-w-four px-4 lg:px-0 mx-auto text-med\">Current Test: {currentTest}</div>\n      <Form preSubmit={handlePreSubmit} className=\"grid grid-cols-6 lg:grid-cols-12 gap-2xsmall max-w-four mx-auto py-med px-small bg-gray-50 border shadow-md font-semibold text-stone-800\">\n        <input type=\"hidden\" name=\"page\" defaultValue={pageName} />\n        <Input label=\"First Name\" className=\"col-span-12 lg:col-span-6\" defaultValue={\"Johnny\"} />\n        <Input label=\"Last Name\" className=\"col-span-12 lg:col-span-6\" defaultValue={\"Monk\"} />\n        <Input label=\"Email\" className=\"col-span-12\" defaultValue={\"JohnnyMonk@gmail.com\"} />\n        <RadioGroup defaulted className=\"w-full grid grid-cols-1 lg:grid-cols-2 col-span-12 lg:col-span-6\" label=\"Radio Group\" options={[\"Option 1\", \"Option 2\", \"Option 3\", \"Option 4\"]} />\n        <CheckboxGroup\n          selected={[0, 3]}\n          className=\"w-full grid grid-cols-1 lg:grid-cols-2 col-span-12 lg:col-span-6\"\n          label=\"Checkboxes\"\n          options={[\"Checkbox 1\", \"Checkbox 2\", \"Checkbox 3\", \"Checkbox 4\"]}\n        />\n        <Select label=\"Rating\" className=\"col-span-12\" options={[\"Amazing\", \"Very Good\", \"Good\", \"Ok\", \"Not Bad\", \"Bad\", \"Terrible\"]} />\n        <TextArea label=\"Message?\" className=\"col-span-12\" defaultValue={\"This was a good test. :)\"} />\n        <button type=\"submit\" className=\"col-span-6 bg-indigo-600 text-white py-2xsmall rounded \">\n          Submit\n        </button>\n      </Form>\n    </main>\n  );\n};\n\nexport default Test;\n\nexport const Head: HeadFC = () => <title>TEST!</title>;\n"],"names":["toKebabCase","input","string","toLowerCase","replaceAll","replace","includes","substring","indexOf","inputStyle","labelStyle","Form","_ref","children","className","id","preSubmit","React","action","method","onSubmit","e","preventDefault","currentTarget","submit","type","name","value","window","defaultValue","location","href","Input","_ref2","label","other","inputClassName","inputProps","htmlFor","required","Object","assign","TextArea","_ref3","textAreaProps","Select","_ref4","options","selected","requiredText","onChange","kebabMap","reduce","acc","option","target","map","i","key","RadioGroup","_ref6","defaulted","defaultChecked","CheckboxGroup","_ref7","Checkbox","checked","_ref8","readOnly","Test","currentTest","setCurrentTest","pageName","setPageName","getStoredNum","localStorage","getItem","intStoredNum","parseInt","date","Date","toLocaleDateString","year","month","day","handlePreSubmit","setItem","Head"],"sourceRoot":""}