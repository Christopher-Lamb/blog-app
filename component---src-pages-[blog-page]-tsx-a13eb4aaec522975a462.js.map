{"version":3,"file":"component---src-pages-[blog-page]-tsx-a13eb4aaec522975a462.js","mappings":"qNAqFA,UA9DsCA,KACpC,MAAMC,EAAyB,oBAAXC,OAAyBA,OAAOC,SAASC,SAASC,MAAM,KAAK,GAAK,IAChF,EAACC,EAAS,EAAEC,IAAgBC,EAAAA,EAAAA,UAAqB,KACjD,EAACC,EAAQ,EAAEC,IAAeF,EAAAA,EAAAA,YAsBhC,OApBAG,EAAAA,EAAAA,YAAU,KACSC,WACf,MAAMC,QAAmDC,EAAAA,EAAAA,IAAmBb,GAC5E,IAAIc,EAAa,CAAEC,OAAQH,EAAKG,OAAQC,mBAAoBJ,EAAKI,mBAAoBC,gBAAiBL,EAAKK,iBACvGC,EAAyB,GAC7BN,EAAKO,UAAUC,SAASC,IAClB,CAAC,QAAS,YAAYC,SAASD,EAAKE,MACtCT,EAAa,IAAKA,EAAY,CAACO,EAAKE,MAAOF,EAAKG,SACvC,CAAC,aAAc,YAAa,SAASF,SAASD,EAAKE,OAC5DL,EAAWO,KAAKJ,EAClB,IAEFH,EAAWQ,MAAK,CAACC,EAAGC,IAAMD,EAAEE,SAAWD,EAAEC,WACzCvB,EAAaY,GAEbT,EAAYK,EAAuB,EAErCgB,EAAU,GAET,IAEDC,EAAAA,cAAA,YACEA,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,cAAQE,EAAAA,EAAAA,IAAUzB,aAAQ,EAARA,EAAU0B,QAAU,GAAG,oBAE3CH,EAAAA,cAACI,EAAAA,GAAM,MACPJ,EAAAA,cAACK,EAAAA,GAAS,CAACC,UAAU,iGAClB7B,GACCuB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,MAAIO,wBAAyB,CAAEC,OAAQ/B,EAAS0B,OAAS,MACzDH,EAAAA,cAAA,QAAMS,GAAG,WAAWF,wBAAyB,CAAEC,OAAQ/B,EAASiC,UAAY,MAC5EV,EAAAA,cAAA,QAAMS,GAAG,UAAS,cAAYhC,EAASO,QACvCgB,EAAAA,cAAA,QAAMS,GAAG,SAAQ,IAAIE,MAAOC,uBAGhCZ,EAAAA,cAAA,OAAKM,UAAU,oCACfN,EAAAA,cAAA,OAAKM,UAAU,QACZhC,EAAUuC,KAAI,CAACC,EAAOC,IACF,UAAfD,EAAMtB,KAENQ,EAAAA,cAAA,OAAKgB,IAAKD,EAAGT,UAAU,0BACrBN,EAAAA,cAAA,OAAKM,UAAU,+BACbN,EAAAA,cAAA,OAAKM,UAAU,iDAAiDW,IAAKH,EAAMG,KAAO,GAAIC,IAAKJ,EAAMrB,WAEnGO,EAAAA,cAAA,OAAKM,UAAU,kCAAkCC,wBAAyB,CAAEC,OAAQM,EAAMrB,SAAW,OAIlGO,EAAAA,cAAA,OAAKgB,IAAKD,EAAGT,UAAS,aAAeQ,EAAMtB,KAAQe,wBAAyB,CAAEC,OAAQM,EAAMrB,SAAW,UAKtHO,EAAAA,cAACmB,EAAAA,GAAM,CAACb,UAAU,YACb,EAKJ,MAAMc,EAAeA,IAAMpB,EAAAA,cAAA,aAAO,Y","sources":["webpack://my-gatsby-site/./src/pages/[blog-page].tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport type { HeadFC, PageProps } from \"gatsby\";\nimport { Footer, Navbar, Container } from \"../components\";\nimport { getPublishedBySlug } from \"../utils/blogAPI\";\nimport { h1Content } from \"../utils\";\nimport { Helmet } from \"react-helmet\";\n\ninterface BlogItem {\n  _id: string;\n  type: string;\n  content?: string;\n  src?: string;\n  position: number;\n}\n\ninterface BlogInfo {\n  author: string;\n  firstPublishedDate: string;\n  lastUpdatedDate: string;\n  title?: string | undefined;\n  subtitle?: string | undefined;\n}\n\nconst BlogPage: React.FC<PageProps> = () => {\n  const slug = typeof window !== \"undefined\" ? window.location.pathname.split(\"/\")[1] : \"\";\n  const [blogItems, setBlogItems] = useState<BlogItem[]>([]);\n  const [blogInfo, setBlogInfo] = useState<BlogInfo>();\n\n  useEffect(() => {\n    const initBlog = async () => {\n      const blog: BlogInfo & { published: BlogItem[] } = await getPublishedBySlug(slug);\n      let infoObject = { author: blog.author, firstPublishedDate: blog.firstPublishedDate, lastUpdatedDate: blog.lastUpdatedDate };\n      let itemsArray: BlogItem[] = [];\n      blog.published.forEach((item) => {\n        if ([\"title\", \"subtitle\"].includes(item.type)) {\n          infoObject = { ...infoObject, [item.type]: item.content };\n        } else if ([\"subheading\", \"paragraph\", \"image\"].includes(item.type)) {\n          itemsArray.push(item);\n        }\n      });\n      itemsArray.sort((a, b) => a.position - b.position);\n      setBlogItems(itemsArray);\n      // console.log(itemsArray);\n      setBlogInfo(infoObject as BlogInfo);\n    };\n    initBlog();\n    // console.log(slug);\n  }, []);\n  return (\n    <main>\n      <Helmet>\n        <title>{h1Content(blogInfo?.title) || \"\"}The Public Post</title>\n      </Helmet>\n      <Navbar />\n      <Container className=\"flex flex-col items-start blog mt-med container mx-auto px-4 md:px-0 max-w-four min-h-[80vh]s\">\n        {blogInfo && (\n          <>\n            <h1 dangerouslySetInnerHTML={{ __html: blogInfo.title || \"\" }}></h1>\n            <span id=\"subtitle\" dangerouslySetInnerHTML={{ __html: blogInfo.subtitle || \"\" }}></span>\n            <span id=\"author\">Written by {blogInfo.author}</span>\n            <span id=\"date\">{new Date().toLocaleDateString()}</span>\n          </>\n        )}\n        <div className=\"w-full h-[1px] mt-2 bg-gray-200\"></div>\n        <div className=\"grid\">\n          {blogItems.map((props, i) => {\n            if (props.type === \"image\") {\n              return (\n                <div key={i} className=\"w-full published-image\">\n                  <div className=\"relative min-h-fulls w-full\">\n                    <img className=\"inset-0 h-full min-w-full mx-auto object-cover\" src={props.src || \"\"} alt={props.content} />\n                  </div>\n                  <div className=\"text-[14px] mt-1 text-[#595959]\" dangerouslySetInnerHTML={{ __html: props.content || \"\" }}></div>\n                </div>\n              );\n            } else {\n              return <div key={i} className={`published-${props.type}`} dangerouslySetInnerHTML={{ __html: props.content || \"\" }}></div>;\n            }\n          })}\n        </div>\n      </Container>\n      <Footer className=\"mt-four\" />\n    </main>\n  );\n};\nexport default BlogPage;\n\nexport const Head: HeadFC = () => <title>Blog Page</title>;\n"],"names":["BlogPage","slug","window","location","pathname","split","blogItems","setBlogItems","useState","blogInfo","setBlogInfo","useEffect","async","blog","getPublishedBySlug","infoObject","author","firstPublishedDate","lastUpdatedDate","itemsArray","published","forEach","item","includes","type","content","push","sort","a","b","position","initBlog","React","Helmet","h1Content","title","Navbar","Container","className","dangerouslySetInnerHTML","__html","id","subtitle","Date","toLocaleDateString","map","props","i","key","src","alt","Footer","Head"],"sourceRoot":""}